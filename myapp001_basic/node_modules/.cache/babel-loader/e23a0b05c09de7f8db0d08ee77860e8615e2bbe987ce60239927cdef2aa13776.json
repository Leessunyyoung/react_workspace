{"ast":null,"code":"var _jsxFileName = \"D:\\\\bic_study\\\\react_workspace\\\\myapp001_basic\\\\src\\\\components\\\\ex04_useEffect\\\\MyuseEffect001.js\",\n  _s = $RefreshSig$();\n/*\r\n  useEffect : 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정한다.\r\n  특정작업(side effect) : Time(setTimeout), Ajax ->비동기화 작업처리되는것들\r\n  useEffect: useEffect는 side effect라는 뜻이다.\r\n  useEffect 4가지 종류\r\n  1. useEffect(callback) : 마운트 후, 리렌더링 될때마다\r\n  2. useEffect(callback,[]) : 마운트 후 딱한번\r\n  3. useEffect(callback, [state]) : 마운트 후, state값이 변경될때에만\r\n  4. useEffect(callback() { return();}, []) : 마운트 후,리턴되는값이 있을때 언마운트 전(종료가 되기전)\r\n\r\n\r\n*/\n\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyuseEffect001 = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [nickName, setNickName] = useState('');\n  const onChangeName = e => {\n    setName(e.target.value); //이벤트가 발생되었을때 객체의 값을 가져옴.\n  };\n\n  const onChangeNickName = e => {\n    setNickName(e.target.value);\n  };\n  useEffect(() => {\n    console.log('렌더링이 되었습니다'); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\n  });\n\n  useEffect(() => {\n    console.log('렌더링 Name:' + name); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\n  }, [name]);\n  useEffect(() => {\n    console.log('렌더링 Nickname:' + nickName); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\n  }, [nickName]);\n  useEffect(() => {\n    console.log('렌더링 name:' + {\n      name\n    } + ',NickName:' + {\n      nickName\n    }); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\n  }, [name, nickName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: onChangeName,\n        placeholder: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: nickName,\n        onChange: onChangeNickName,\n        placeholder: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\uC774\\uB984:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\uB2C9\\uB124\\uC784:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), nickName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MyuseEffect001, \"I7gJxXab9skhpP5LAszTqqZZ8tg=\");\n_c = MyuseEffect001;\nexport default MyuseEffect001;\nvar _c;\n$RefreshReg$(_c, \"MyuseEffect001\");","map":{"version":3,"names":["useEffect","useState","MyuseEffect001","name","setName","nickName","setNickName","onChangeName","e","target","value","onChangeNickName","console","log"],"sources":["D:/bic_study/react_workspace/myapp001_basic/src/components/ex04_useEffect/MyuseEffect001.js"],"sourcesContent":["/*\r\n  useEffect : 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정한다.\r\n  특정작업(side effect) : Time(setTimeout), Ajax ->비동기화 작업처리되는것들\r\n  useEffect: useEffect는 side effect라는 뜻이다.\r\n  useEffect 4가지 종류\r\n  1. useEffect(callback) : 마운트 후, 리렌더링 될때마다\r\n  2. useEffect(callback,[]) : 마운트 후 딱한번\r\n  3. useEffect(callback, [state]) : 마운트 후, state값이 변경될때에만\r\n  4. useEffect(callback() { return();}, []) : 마운트 후,리턴되는값이 있을때 언마운트 전(종료가 되기전)\r\n\r\n\r\n*/\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst MyuseEffect001 = () => {\r\n  const [name, setName] = useState('');\r\n  const [nickName, setNickName] = useState('');\r\n\r\n  const onChangeName = (e) => {\r\n    setName(e.target.value); //이벤트가 발생되었을때 객체의 값을 가져옴.\r\n  };\r\n  const onChangeNickName = (e) => {\r\n    setNickName(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('렌더링이 되었습니다'); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log('렌더링 Name:' + name); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\r\n  }, [name]);\r\n\r\n  useEffect(() => {\r\n    console.log('렌더링 Nickname:' + nickName); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\r\n  }, [nickName]);\r\n\r\n  useEffect(() => {\r\n    console.log('렌더링 name:' + { name } + ',NickName:' + { nickName }); //처음에 렌더링이 되었습니다 2번출력되는이유 index.js에서 React.StrictMode때문이다. 상관안해두댐\r\n  }, [name, nickName]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type='text'\r\n          value={name}\r\n          onChange={onChangeName}\r\n          placeholder='name'\r\n        />\r\n\r\n        <input\r\n          type='text'\r\n          value={nickName}\r\n          onChange={onChangeNickName}\r\n          placeholder='name'\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>이름:</b>\r\n        {name}\r\n      </div>\r\n\r\n      <div>\r\n        <b>닉네임:</b>\r\n        {nickName}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyuseEffect001;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMM,YAAY,GAAIC,CAAC,IAAK;IAC1BJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;;EACD,MAAMC,gBAAgB,GAAIH,CAAC,IAAK;IAC9BF,WAAW,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;EAC7B,CAAC,CAAC;;EAEFb,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGV,IAAI,CAAC,CAAC,CAAC;EACnC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVH,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdL,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,WAAW,GAAG;MAAEV;IAAK,CAAC,GAAG,YAAY,GAAG;MAAEE;IAAS,CAAC,CAAC,CAAC,CAAC;EACrE,CAAC,EAAE,CAACF,IAAI,EAAEE,QAAQ,CAAC,CAAC;EAEpB,oBACE;IAAA,wBACE;MAAA,wBACE;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAEF,IAAK;QACZ,QAAQ,EAAEI,YAAa;QACvB,WAAW,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAClB,eAEF;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAEF,QAAS;QAChB,QAAQ,EAAEM,gBAAiB;QAC3B,WAAW,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAClB;IAAA;MAAA;MAAA;MAAA;IAAA,QACE,eACN;MAAA,wBACE;QAAA,UAAG;MAAG;QAAA;QAAA;QAAA;MAAA,QAAI,EACTR,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACD,eAEN;MAAA,wBACE;QAAA,UAAG;MAAI;QAAA;QAAA;QAAA;MAAA,QAAI,EACVE,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAvDIH,cAAc;AAAA,KAAdA,cAAc;AAyDpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}